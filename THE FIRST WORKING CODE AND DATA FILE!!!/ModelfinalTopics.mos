model TutorScheduling
 uses "mmxprs", "mmnl", "mmxnlp"

declarations
  ! Sets
  Tutors: range
  Courses: range
  Timeslots: range
  Tdash: range ! T such that all t > 1
  nbTutors,nbCourses,nbTimeslots : integer
end-declarations

initialisations from "tutordata1.txt"
  nbTutors nbCourses nbTimeslots
end-initialisations

Tutors:= 1..nbTutors
Courses:= 1..nbCourses
Timeslots := 1..nbTimeslots
Tdash:= 2..nbTimeslots

declarations
  ! Parameters
  p: array(Tutors,Courses) of real ! Preference score for tutor i on course j
  wth: array(Courses) of real      ! Weekly tutor hours per course
  tmm: array(Courses) of real      ! Multiplier for marking, prep, etc. TMM
  r: array(Courses,Timeslots) of real ! Number of tutors required for course j at time t
  Lh: array(Tutors) of real       ! Min total tutor hours per week
  Uh: array(Tutors) of real       ! Max total tutor hours per week
  lc: array(Tutors) of real       ! Min number of courses per tutor
  uc: array(Tutors) of real       ! Max number of courses per tutor
  a: array(Tutors,Timeslots) of real  ! Tutor availability (1 if available, 0 otherwise)
  e: array(Courses,Timeslots) of real ! 1 if workshop exists at time t for course j
  W: array(Courses,Timeslots) of real ! 1 if timeslot t belongs to the same workshop as t-1
  M: real                         ! number of timeperiods

  ! Decision Variables
  x: array(Tutors,Courses) of mpvar              ! 1 if tutor i is assigned to course j at time t
  xt: array(Tutors,Courses,Timeslots) of mpvar   ! 1 if tutor i is assigned to course j

  ! Objective Function: maximise fairness and prefrences weighting variables
  alpha: real
  beta: real
  lambda: real

  ! Names
  Tutor_names: array(Tutors) of string
  Course_names: array(Courses) of string
  
  Prefrences: mpvar

end-declarations

initialisations from "tutordata1.txt"
  p wth tmm r a e W Tutor_names Course_names
end-initialisations

M := nbTimeslots
alpha:= 1
beta:= 1
lambda:= 2

forall(i in Tutors, j in Courses, t in Timeslots) do
  xt(i,j,t) is_binary
end-do
forall(i in Tutors, j in Courses) do
  x(i,j) is_binary
end-do

! Constraints

! (1) Ensure required number of tutors per workshop slot
forall(j in Courses, t in Timeslots) do
    sum(i in Tutors) xt(i,j,t) = r(j,t)
end-do

! (2) Weekly hour constraints
forall(i in Tutors) do
  Lh(i) <= sum(j in Courses)(wth(j)*tmm(j)*12*x(i,j))
  sum(j in Courses)(wth(j)*tmm(j)*12*x(i,j)) <= Uh(i)
end-do

! (3) Prevent tutor switching within a workshop
forall(i in Tutors, j in Courses, t in Tdash) do
  xt(i,j,t) - xt(i,j,t-1) <= 1 - W(j,t)
end-do

! (4) Availability and active workshop constraint
forall(i in Tutors, j in Courses, t in Timeslots) do
  M*x(i,j) <= e(j,t)*a(i,t)
end-do

! (5) Weekly hours per tutor per course
forall(i in Tutors, j in Courses) do
  12 * wth(j) = 0.5 * sum(t in Timeslots) xt(i,j,t)
end-do

! (6) Course limits per tutor
forall(i in Tutors) do
  lc(i) <= sum(j in Courses) x(i,j)
  sum(j in Courses) x(i,j) <= uc(i)
end-do

! (7) Ensure only assigned to one course at time t
forall(i in Tutors, t in Timeslots) do
  sum(j in Courses)xt(i,j,t) <= 1
end-do

Prefrences = sum(i in Tutors, j in Courses, t in Timeslots)(alpha*p(i,j)*xt(i,j,t))

! Solve model
! minimise(sum(i in Tutors, j in Courses, t in Timeslots)(alpha*p(i,j)*xt(i,j,t))-beta*sum(i in Tutors, j in Courses)(x(i,j))-lambda*(max(i in Tutors)(sum(j in Courses)x(i,j))-min(i in Tutors)(sum(j in Courses)(x(i,j)))))
! minimise(sum(i in Tutors, j in Courses, t in Timeslots)(alpha*p(i,j)*xt(i,j,t))-beta*sum(i in Tutors, j in Courses)(x(i,j)))

minimise(Prefrences)

! Output solution
forall(i in Tutors, j in Courses) do
    if getsol(x(i,j)) <> 0 then
      writeln( Tutor_names(i) , " assigned to Course ", Course_names(j))
    end-if
end-do


end-model