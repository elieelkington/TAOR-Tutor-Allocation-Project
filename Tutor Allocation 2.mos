model 'Tutor Allocation 2'
  uses "mmxprs", "mmnl", "mmxnlp"

declarations
  ! Explicit integers from datafile
  nbTutors: integer  ! number of tutors
  nbCourses: integer  ! number of courses w/ workshop in sem 2
  nbTimeslots: integer  ! number of 30-min times lots in week (Mon-Fri)
  Lh: integer  ! Min total tutor hours per week
  Uh: integer  ! Max total tutor hours per week
  lc: integer  ! Min number of courses per tutor
  uc: integer  ! Max number of courses per tutor
end-declarations

initialisations from 'NewData2.txt'
   nbTutors nbCourses nbTimeslots  ! explicit integers
   Lh Uh lc uc
end-initialisations

declarations
  ! Indexing Sets
  Tutors = 1.. nbTutors
  Courses = 1..nbCourses
  Timeslots = 1..nbTimeslots
  Tdash = 2..nbTimeslots

  ! Parameters
  ! p: array(Tutors,Courses) of real ! Preference score for tutor i on course j
  wth: array(Courses) of real      ! Weekly tutor hours per course
  tmm: array(Courses) of real      ! Multiplier for marking, prep, etc. TMM
  r: array(Courses,Timeslots) of real ! Number of tutors required for course j at time t
  a: array(Tutors,Timeslots) of real  ! Tutor availability (1 if available, 0 otherwise)
  e: array(Courses,Timeslots) of real ! 1 if workshop exists at time t for course j
  W: array(Courses,Timeslots) of real ! 1 if timeslot t belongs to the same workshop as t-1
  lpt: array(Tutors) of integer ! number of preferences per tutor (dont want prefs)
  ! hpt: array(Tutors) of real ! number of preferences per tutor (high prefs)
  m: array(Tutors) of integer  ! getting minimum b/t preferences and course max limit

  ! ! ! Names
  ! Tutor_names: array(Tutors) of string
  ! Course_names: array(Courses) of string

  ! Decision Variables
  xt: array(Tutors,Courses,Timeslots) of mpvar   ! 1 if tutor i is assigned to course j at time t
end-declarations

initializations from 'NewData2.txt'
  wth tmm r a e W lpt ! parameters
end-initializations

! ===== Binary Decision Var =======================================

! 1 if tutor i is assigned to course j at time t
forall(i in Tutors, j in Courses, t in Timeslots) do
  xt(i,j,t) is_binary
end-do

! ====== getting m variable ===========================
forall (i in Tutors) do
  ! writeln("lpt(", i, ") = ", lpt(i), ", uc = ", uc)
  if lpt(i) > 0 then
    if lpt(i) < uc then
      m(i) := lpt(i)
    else
      m(i) := uc
    end-if
  else
    m(i) := 1
  end-if
  ! writeln("m(", i, ") = ", m(i))
end-do

 ! ==== Constraints ======================================

! Required number of tutors in each workshop
forall(j in Courses, t in Timeslots) do
  sum(i in Tutors) xt(i,j,t) = r(j,t)
end-do

! ! Number of tutor hours per week limitations
! forall(i in Tutors, j in Courses, t in Timeslots) do
!   Lh <= ((tmm(j) * wth(j) * xt(i,j,t))*12)
!   ((tmm(j) * wth(j) * xt(i,j,t))*12) <= Uh
! end-do

! Number of courses a tutor can be assigned to limitation
forall(i in Tutors, t in Timeslots) do
  lc <= (sum(j in Courses) xt(i,j,t))
  (sum(j in Courses) xt(i,j,t)) <= uc
end-do


! don't double-book tutors for a timeslots
forall(i in Tutors, t in Timeslots) do
  sum(j in Courses) xt(i,j,t) <= 1
end-do

! only assign a tutor to a slot if they are available to work
forall(i in Tutors, j in Courses, t in Timeslots) do
  xt(i,j,t) <= e(j,t)*a(i,t)
end-do

! assign tutor to the whole WS session (not just part)
forall(i in Tutors, j in Courses, t in Tdash) do
  xt(i,j,t) - xt(i,j,t-1) <= 1 - W(j,t)
end-do


! ==== Objective Function and Optimization ==============
! to maximize preferences
obj_fnct := sum(i in Tutors, j in Courses, t in Timeslots) (xt(i,j,t) * 1/m(i))

maximise(obj_fnct)

! ==== Print Statements ==================================

forall(i in Tutors, j in Courses, t in Timeslots) do
  if getsol( xt(i,j,t)) > 0 then
    writeln('Tutor ', i, ' for course ', j, ' at time slot ', t)
  end-if
end-do


end-model
